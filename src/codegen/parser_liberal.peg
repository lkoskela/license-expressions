complete_expression :=
	value={compound_expression | wrapped_expression | simple_expression} $

compound_expression :=
	and_expression | or_expression

and_expression :=
	whitespace? left={compound_expression | wrapped_expression | simple_expression} AND right={compound_expression | wrapped_expression | simple_expression} whitespace?

or_expression :=
	whitespace? left={compound_expression | wrapped_expression | simple_expression} OR right={compound_expression | wrapped_expression | simple_expression} whitespace?

simple_expression :=
	value=words_expression exception=license_exception?

wrapped_expression :=
	'\(' whitespace? value={compound_expression | wrapped_expression | simple_expression} whitespace? '\)'

license_exception :=
	WITH value=words

words_expression := prefix=words suffix='\+?\+?'
	.value = any { return { prefix: this.prefix, suffix: (this.suffix ? this.suffix : '') }; }

WITH := whitespace 'WITH' whitespace
AND := whitespace 'AND' whitespace
OR := whitespace 'OR' whitespace
whitespace := '[\s\t\n]+'
words := head=word tail={ {whitespace | ',' whitespace?} rest=words}?
word := !'WITH' !'AND' !'OR' !'\(' !'\)' value='[a-zA-Z0-9\.\-:]+'
