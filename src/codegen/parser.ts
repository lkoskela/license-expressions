/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* expression := value={compound_expression | simple_expression} $
* wrapped_expression := '\(' value=compound_expression '\)'
* compound_expression := 
*     left=compound_expression whitespace conjuction=AND whitespace right=compound_expression |
*     left=compound_expression whitespace conjuction=OR whitespace right=compound_expression |
* 	wrapped_expression |
* 	license_exception |
* 	simple_expression
* license_exception :=
* 	license={idstring '\+' | idstring} whitespace conjuction=WITH whitespace exception=idstring
* license_ref :=
* 	'DocumentRef-' document_ref=idstring ':' 'LicenseRef-' license_ref=idstring |
* 	'LicenseRef-' license_ref=idstring
* WITH := '[Ww][Ii][Tt][Hh]'
* AND := '[Aa][Nn][Dd]'
* OR := '[Oo][Rr]'
* whitespace := '[\s\n]+'
* idstring := '[a-zA-Z0-9][a-zA-Z0-9\.\-]*[a-zA-Z0-9]+\+?'
* license_id := license=idstring
* license_expression := license_id | license_id '\+'
* simple_expression := license_ref | license_expression
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    expression = "expression",
    expression_$0_1 = "expression_$0_1",
    expression_$0_2 = "expression_$0_2",
    wrapped_expression = "wrapped_expression",
    compound_expression_1 = "compound_expression_1",
    compound_expression_2 = "compound_expression_2",
    compound_expression_3 = "compound_expression_3",
    compound_expression_4 = "compound_expression_4",
    compound_expression_5 = "compound_expression_5",
    license_exception = "license_exception",
    license_exception_$0_1 = "license_exception_$0_1",
    license_exception_$0_2 = "license_exception_$0_2",
    license_ref_1 = "license_ref_1",
    license_ref_2 = "license_ref_2",
    WITH = "WITH",
    AND = "AND",
    OR = "OR",
    whitespace = "whitespace",
    idstring = "idstring",
    license_id = "license_id",
    license_expression_1 = "license_expression_1",
    license_expression_2 = "license_expression_2",
    simple_expression_1 = "simple_expression_1",
    simple_expression_2 = "simple_expression_2",
    $EOF = "$EOF",
}
export interface expression {
    kind: ASTKinds.expression;
    value: expression_$0;
}
export type expression_$0 = expression_$0_1 | expression_$0_2;
export type expression_$0_1 = compound_expression;
export type expression_$0_2 = simple_expression;
export interface wrapped_expression {
    kind: ASTKinds.wrapped_expression;
    value: compound_expression;
}
export type compound_expression = compound_expression_1 | compound_expression_2 | compound_expression_3 | compound_expression_4 | compound_expression_5;
export interface compound_expression_1 {
    kind: ASTKinds.compound_expression_1;
    left: compound_expression;
    conjuction: AND;
    right: compound_expression;
}
export interface compound_expression_2 {
    kind: ASTKinds.compound_expression_2;
    left: compound_expression;
    conjuction: OR;
    right: compound_expression;
}
export type compound_expression_3 = wrapped_expression;
export type compound_expression_4 = license_exception;
export type compound_expression_5 = simple_expression;
export interface license_exception {
    kind: ASTKinds.license_exception;
    license: license_exception_$0;
    conjuction: WITH;
    exception: idstring;
}
export type license_exception_$0 = license_exception_$0_1 | license_exception_$0_2;
export interface license_exception_$0_1 {
    kind: ASTKinds.license_exception_$0_1;
}
export type license_exception_$0_2 = idstring;
export type license_ref = license_ref_1 | license_ref_2;
export interface license_ref_1 {
    kind: ASTKinds.license_ref_1;
    document_ref: idstring;
    license_ref: idstring;
}
export interface license_ref_2 {
    kind: ASTKinds.license_ref_2;
    license_ref: idstring;
}
export type WITH = string;
export type AND = string;
export type OR = string;
export type whitespace = string;
export type idstring = string;
export interface license_id {
    kind: ASTKinds.license_id;
    license: idstring;
}
export type license_expression = license_expression_1 | license_expression_2;
export type license_expression_1 = license_id;
export interface license_expression_2 {
    kind: ASTKinds.license_expression_2;
}
export type simple_expression = simple_expression_1 | simple_expression_2;
export type simple_expression_1 = license_ref;
export type simple_expression_2 = license_expression;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$compound_expression$memo.clear();
    }
    protected $scope$compound_expression$memo: Map<number, [Nullable<compound_expression>, PosInfo]> = new Map();
    public matchexpression($$dpth: number, $$cr?: ErrorTracker): Nullable<expression> {
        return this.run<expression>($$dpth,
            () => {
                let $scope$value: Nullable<expression_$0>;
                let $$res: Nullable<expression> = null;
                if (true
                    && ($scope$value = this.matchexpression_$0($$dpth + 1, $$cr)) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.expression, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchexpression_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_$0> {
        return this.choice<expression_$0>([
            () => this.matchexpression_$0_1($$dpth + 1, $$cr),
            () => this.matchexpression_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_$0_1> {
        return this.matchcompound_expression($$dpth + 1, $$cr);
    }
    public matchexpression_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<expression_$0_2> {
        return this.matchsimple_expression($$dpth + 1, $$cr);
    }
    public matchwrapped_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<wrapped_expression> {
        return this.run<wrapped_expression>($$dpth,
            () => {
                let $scope$value: Nullable<compound_expression>;
                let $$res: Nullable<wrapped_expression> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchcompound_expression($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.wrapped_expression, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchcompound_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<compound_expression> {
        const fn = () => {
            return this.choice<compound_expression>([
                () => this.matchcompound_expression_1($$dpth + 1, $$cr),
                () => this.matchcompound_expression_2($$dpth + 1, $$cr),
                () => this.matchcompound_expression_3($$dpth + 1, $$cr),
                () => this.matchcompound_expression_4($$dpth + 1, $$cr),
                () => this.matchcompound_expression_5($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$compound_expression$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$compound_expression$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<compound_expression> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$compound_expression$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchcompound_expression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<compound_expression_1> {
        return this.run<compound_expression_1>($$dpth,
            () => {
                let $scope$left: Nullable<compound_expression>;
                let $scope$conjuction: Nullable<AND>;
                let $scope$right: Nullable<compound_expression>;
                let $$res: Nullable<compound_expression_1> = null;
                if (true
                    && ($scope$left = this.matchcompound_expression($$dpth + 1, $$cr)) !== null
                    && this.matchwhitespace($$dpth + 1, $$cr) !== null
                    && ($scope$conjuction = this.matchAND($$dpth + 1, $$cr)) !== null
                    && this.matchwhitespace($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchcompound_expression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.compound_expression_1, left: $scope$left, conjuction: $scope$conjuction, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchcompound_expression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<compound_expression_2> {
        return this.run<compound_expression_2>($$dpth,
            () => {
                let $scope$left: Nullable<compound_expression>;
                let $scope$conjuction: Nullable<OR>;
                let $scope$right: Nullable<compound_expression>;
                let $$res: Nullable<compound_expression_2> = null;
                if (true
                    && ($scope$left = this.matchcompound_expression($$dpth + 1, $$cr)) !== null
                    && this.matchwhitespace($$dpth + 1, $$cr) !== null
                    && ($scope$conjuction = this.matchOR($$dpth + 1, $$cr)) !== null
                    && this.matchwhitespace($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchcompound_expression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.compound_expression_2, left: $scope$left, conjuction: $scope$conjuction, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchcompound_expression_3($$dpth: number, $$cr?: ErrorTracker): Nullable<compound_expression_3> {
        return this.matchwrapped_expression($$dpth + 1, $$cr);
    }
    public matchcompound_expression_4($$dpth: number, $$cr?: ErrorTracker): Nullable<compound_expression_4> {
        return this.matchlicense_exception($$dpth + 1, $$cr);
    }
    public matchcompound_expression_5($$dpth: number, $$cr?: ErrorTracker): Nullable<compound_expression_5> {
        return this.matchsimple_expression($$dpth + 1, $$cr);
    }
    public matchlicense_exception($$dpth: number, $$cr?: ErrorTracker): Nullable<license_exception> {
        return this.run<license_exception>($$dpth,
            () => {
                let $scope$license: Nullable<license_exception_$0>;
                let $scope$conjuction: Nullable<WITH>;
                let $scope$exception: Nullable<idstring>;
                let $$res: Nullable<license_exception> = null;
                if (true
                    && ($scope$license = this.matchlicense_exception_$0($$dpth + 1, $$cr)) !== null
                    && this.matchwhitespace($$dpth + 1, $$cr) !== null
                    && ($scope$conjuction = this.matchWITH($$dpth + 1, $$cr)) !== null
                    && this.matchwhitespace($$dpth + 1, $$cr) !== null
                    && ($scope$exception = this.matchidstring($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.license_exception, license: $scope$license, conjuction: $scope$conjuction, exception: $scope$exception};
                }
                return $$res;
            });
    }
    public matchlicense_exception_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<license_exception_$0> {
        return this.choice<license_exception_$0>([
            () => this.matchlicense_exception_$0_1($$dpth + 1, $$cr),
            () => this.matchlicense_exception_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlicense_exception_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<license_exception_$0_1> {
        return this.run<license_exception_$0_1>($$dpth,
            () => {
                let $$res: Nullable<license_exception_$0_1> = null;
                if (true
                    && this.matchidstring($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.license_exception_$0_1, };
                }
                return $$res;
            });
    }
    public matchlicense_exception_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<license_exception_$0_2> {
        return this.matchidstring($$dpth + 1, $$cr);
    }
    public matchlicense_ref($$dpth: number, $$cr?: ErrorTracker): Nullable<license_ref> {
        return this.choice<license_ref>([
            () => this.matchlicense_ref_1($$dpth + 1, $$cr),
            () => this.matchlicense_ref_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlicense_ref_1($$dpth: number, $$cr?: ErrorTracker): Nullable<license_ref_1> {
        return this.run<license_ref_1>($$dpth,
            () => {
                let $scope$document_ref: Nullable<idstring>;
                let $scope$license_ref: Nullable<idstring>;
                let $$res: Nullable<license_ref_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:DocumentRef-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$document_ref = this.matchidstring($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:LicenseRef-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$license_ref = this.matchidstring($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.license_ref_1, document_ref: $scope$document_ref, license_ref: $scope$license_ref};
                }
                return $$res;
            });
    }
    public matchlicense_ref_2($$dpth: number, $$cr?: ErrorTracker): Nullable<license_ref_2> {
        return this.run<license_ref_2>($$dpth,
            () => {
                let $scope$license_ref: Nullable<idstring>;
                let $$res: Nullable<license_ref_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:LicenseRef-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$license_ref = this.matchidstring($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.license_ref_2, license_ref: $scope$license_ref};
                }
                return $$res;
            });
    }
    public matchWITH($$dpth: number, $$cr?: ErrorTracker): Nullable<WITH> {
        return this.regexAccept(String.raw`(?:[Ww][Ii][Tt][Hh])`, $$dpth + 1, $$cr);
    }
    public matchAND($$dpth: number, $$cr?: ErrorTracker): Nullable<AND> {
        return this.regexAccept(String.raw`(?:[Aa][Nn][Dd])`, $$dpth + 1, $$cr);
    }
    public matchOR($$dpth: number, $$cr?: ErrorTracker): Nullable<OR> {
        return this.regexAccept(String.raw`(?:[Oo][Rr])`, $$dpth + 1, $$cr);
    }
    public matchwhitespace($$dpth: number, $$cr?: ErrorTracker): Nullable<whitespace> {
        return this.regexAccept(String.raw`(?:[\s\n]+)`, $$dpth + 1, $$cr);
    }
    public matchidstring($$dpth: number, $$cr?: ErrorTracker): Nullable<idstring> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9][a-zA-Z0-9\.\-]*[a-zA-Z0-9]+\+?)`, $$dpth + 1, $$cr);
    }
    public matchlicense_id($$dpth: number, $$cr?: ErrorTracker): Nullable<license_id> {
        return this.run<license_id>($$dpth,
            () => {
                let $scope$license: Nullable<idstring>;
                let $$res: Nullable<license_id> = null;
                if (true
                    && ($scope$license = this.matchidstring($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.license_id, license: $scope$license};
                }
                return $$res;
            });
    }
    public matchlicense_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<license_expression> {
        return this.choice<license_expression>([
            () => this.matchlicense_expression_1($$dpth + 1, $$cr),
            () => this.matchlicense_expression_2($$dpth + 1, $$cr),
        ]);
    }
    public matchlicense_expression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<license_expression_1> {
        return this.matchlicense_id($$dpth + 1, $$cr);
    }
    public matchlicense_expression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<license_expression_2> {
        return this.run<license_expression_2>($$dpth,
            () => {
                let $$res: Nullable<license_expression_2> = null;
                if (true
                    && this.matchlicense_id($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.license_expression_2, };
                }
                return $$res;
            });
    }
    public matchsimple_expression($$dpth: number, $$cr?: ErrorTracker): Nullable<simple_expression> {
        return this.choice<simple_expression>([
            () => this.matchsimple_expression_1($$dpth + 1, $$cr),
            () => this.matchsimple_expression_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsimple_expression_1($$dpth: number, $$cr?: ErrorTracker): Nullable<simple_expression_1> {
        return this.matchlicense_ref($$dpth + 1, $$cr);
    }
    public matchsimple_expression_2($$dpth: number, $$cr?: ErrorTracker): Nullable<simple_expression_2> {
        return this.matchlicense_expression($$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchexpression(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchexpression(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchexpression(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<expression>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}